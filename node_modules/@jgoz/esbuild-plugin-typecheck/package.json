{
  "name": "@jgoz/esbuild-plugin-typecheck",
  "version": "2.0.0",
  "author": "John Gozde <john@gozde.ca>",
  "description": "TypeScript type-checking plugin for esbuild",
  "license": "MIT",
  "homepage": "https://github.com/jgoz/esbuild-plugins#readme",
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jgoz/esbuild-plugins.git",
    "directory": "packages/esbuild-plugin-typecheck"
  },
  "bugs": {
    "url": "https://github.com/jgoz/esbuild-plugins/issues"
  },
  "keywords": [
    "esbuild-plugin",
    "esbuild",
    "typescript",
    "checking",
    "diagnostics"
  ],
  "main": "dist/plugin-typecheck.js",
  "types": "lib/index.d.ts",
  "peerDependencies": {
    "@jgoz/esbuild-plugin-livereload": ">=1.1.0",
    "typescript": ">= 3.5"
  },
  "peerDependenciesMeta": {
    "@jgoz/esbuild-plugin-livereload": {
      "optional": true
    }
  },
  "devDependencies": {
    "@jgoz/esbuild-plugin-livereload": "1.1.0",
    "@types/node": "^16.11.46",
    "esbuild": "^0.14.51",
    "esbuild-node-externals": "^1.4.1",
    "execa": "^5.0.0",
    "memfs": "^3.4.7",
    "picocolors": "^1.0.0",
    "prettier": "^2.7.1",
    "tslib": "^2.4.0",
    "typescript": "^4.7.4",
    "unionfs": "^4.4.0",
    "vite": "^3.0.3",
    "vitest": "^0.19.1"
  },
  "scripts": {
    "docs": "../../scripts/markdown-interpolate.mjs README.md && prettier --write README.md",
    "test": "vitest run",
    "watch": "./bundle.js build -w"
  },
  "readme": "# @jgoz/esbuild-plugin-typecheck\n\nAn esbuild plugin for TypeScript type checking and side-channel compilation.\n\n### Features\n\n- Runs asynchronously in a worker thread\n- Supports project references and build mode\n- Reports errors to `@jgoz/esbuild-plugin-livereload`\n\n### Install\n\n```console\n$ npm i @jgoz/esbuild-plugin-typecheck\n```\n\n### Usage\n\nAdd it to your esbuild plugins:\n\n```js\nconst esbuild = require('esbuild');\nconst { typecheckPlugin } = require('@jgoz/esbuild-plugin-typecheck');\n\nawait esbuild.build({\n  // ...\n  plugins: [typecheckPlugin()],\n});\n```\n\n### API\n\n#### `function typecheckPlugin(options?: TypecheckPluginOptions): Plugin`\n\n**Plugin options:**\n\n<!-- prettier-ignore-start -->\n<!-- markdown-interpolate: node ../../scripts/docs.mjs ./src/types.ts TypecheckPluginOptions -->\n| Name | Type | Default | Description |\n| ---- | ---- | ------- | ----------- |\n| [build](https://www.typescriptlang.org/docs/handbook/project-references.html#tsc--b-commandline) | `boolean \\| BuildOptions` | - | Run the compiler in build mode, equivalent to running `tsc --build`. Normally, this will be inferred if `tsconfig.json` sets `\"composite\": true` but it can be overridden by this option.<br><br>This option also accepts an object, which implicitly turns build mode on. The object accepts build-mode-specific options that will be passed to the TypeScript compiler API.  |\n| buildMode | `\"readonly\" \\| \"write-output\"` | `\"readonly\"` | Changes the behavior of build mode with respect to program output (JavaScript, type definitions, sourcemaps, and .tsbuildinfo files).<li>`readonly` (default) &mdash; output files will be written to an in-memory   file system and discared after esbuild exits<li>`write-output` &mdash; output files will be written to disk as though you   had invoked `tsc --build`<br><br>There are tradeoffs between the two modes. In `readonly` mode, the initial typecheck may be slower, especially if the output/.tsbuildinfo files do not match the source files. However, subsequent incremental typechecks may be slightly faster since no I/O is involved. This mode is also the least surprising because typechecking implies a different intent than compilation, but TypeScript's build mode needs to produce output in order to remain fast for incremental compilation.<br><br>In `write-output` mode, the output files will always be in sync with the input files, so the initial compilation may be slightly faster. However, subsequent incremental typechecks might be slightly slower due to I/O overhead. This mode would be appropriate to enable as an alternative to invoking `tsc --build` manually, e.g., in the case where the TypeScript output itself may be used outside of esbuild.  |\n| [compilerOptions](https://www.typescriptlang.org/tsconfig) | `CompilerOptions` | `{}` | TypeScript compiler option overrides that will be merged into the options in \"tsconfig.json\". |\n| configFile | `string` | - | Path to \"tsconfig.json\". If not specified, this will use ESBuild's \"tsconfig\" option, finally falling back to TypeScript's config file resolution algorithm. |\n| logger | `Logger` | - | Logger to use instead of the default. |\n| omitStartLog | `boolean` | `false` | Omit \"Typecheck started\" messages. |\n| watch | `boolean` | - | Force operation in watch mode.<br><br>By default, watch mode will be inferred from esbuild's \"watch\" option.  |\n<!-- end -->\n<!-- prettier-ignore-end -->\n"
}